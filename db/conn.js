const { Sequelize } = require('sequelize');

// Configura√ß√£o da conex√£o com PostgreSQL do Aiven
// Use vari√°veis de ambiente quando dispon√≠veis, sen√£o use configura√ß√£o direta
const DB_CONFIG = {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  username: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
};

const sequelize = new Sequelize(
  DB_CONFIG.database,
  DB_CONFIG.username,
  DB_CONFIG.password,
  {
    host: DB_CONFIG.host,
    port: DB_CONFIG.port,
    dialect: 'postgres',
    dialectOptions: {
      ssl: {
        require: true,
        rejectUnauthorized: false
      }
    },
    logging: console.log, // Mostra as queries SQL no console
    define: {
      timestamps: true, // Adiciona createdAt e updatedAt automaticamente
      underscored: false, // Usa camelCase ao inv√©s de snake_case
    },
    pool: {
      max: 10, // M√°ximo de conex√µes simult√¢neas
      min: 0,  // M√≠nimo de conex√µes
      acquire: 30000, // Tempo m√°ximo para obter conex√£o (30s)
      idle: 10000, // Tempo m√°ximo que uma conex√£o pode ficar inativa (10s)
    },
  }
);

// Fun√ß√£o para testar a conex√£o
async function testConnection() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com PostgreSQL (Aiven) estabelecida com sucesso!');
    console.log(`üìä Conectado ao banco: ${sequelize.config.database}`);
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco de dados:', error.message);
    console.log('üí° Verifique as credenciais do Aiven no arquivo .env');
  }
}

testConnection();

module.exports = sequelize;
